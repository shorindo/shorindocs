/*
 * Copyright 2016 Shorindo, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package {{packageName}};

import java.lang.reflect.Field;
import java.lang.reflect.Method;

import com.shorindo.docs.ActionLogger;
import com.shorindo.docs.BeanUtil;
import com.shorindo.docs.DocsMessages;
import com.shorindo.docs.database.SchemaEntity;
import com.shorindo.docs.database.SchemaType;

/**
 * 
 */
public class {{className}}Entity extends SchemaEntity {
    public enum {{className}}Types implements SchemaType {
        {{#columnList}}
        {{columnName}} ("{{type}}", {{size}}, {{precision}}, {{primaryKey}}, {{notNull}}, {{unique}}, {{defaultValue}}),
        {{/columnList}}
        ;

        private String jdbcType;
        private int size;
        private int precision;
        private int primary;
        private boolean notNull;
        private boolean unique;
        private Object defaultValue;
        private Field field;
        private Method setMethod;
        private Method getMethod;

        private {{className}}Types(String jdbcType, int size, int precision,
                int primary, boolean notNull, boolean unique, Object defaultValue) {
            this.jdbcType = jdbcType;
            this.size = size;
            this.precision = precision;
            this.precision = primary;
            this.notNull = notNull;
            this.unique = unique;
            this.defaultValue = defaultValue;

            String beanName = BeanUtil.snake2camel(name(), false);
            try {
                field = {{className}}Entity.class.getDeclaredField(beanName);
            } catch (NoSuchFieldException e) {
                LOG.error(DocsMessages.E_5119, e, name(), beanName);
                return;
            } catch (SecurityException e) {
                LOG.error(DocsMessages.E_5119, e, name(), beanName);
                return;
            }

            String setterName = "set" + BeanUtil.snake2camel(name(), true);
            try {
                setMethod = {{className}}Entity.class.getMethod(setterName, field.getType());
            } catch (NoSuchMethodException e) {
                LOG.error(DocsMessages.E_5120, e, name(), setterName);
            } catch (SecurityException e) {
                LOG.error(DocsMessages.E_5120, e, name(), setterName);
            }

            String getterName = "get" + BeanUtil.snake2camel(name(), true);
            try {
                getMethod = {{className}}Entity.class.getMethod(getterName);
            } catch (NoSuchMethodException e) {
                LOG.error(DocsMessages.E_5120, e, name(), getterName);
            } catch (SecurityException e) {
                LOG.error(DocsMessages.E_5120, e, name(), getterName);
            }
        }

        @Override public String getColumnName() {
            return name();
        }
        @Override public String getType() {
            return jdbcType;
        }
        @Override public int getSize() {
            return size;
        }
        @Override public int getPrecision() {
            return precision;
        }
        @Override public int getPrimary() {
            return primary;
        }
        @Override public boolean isNotNull() {
            return notNull;
        }
        @Override public boolean isUnique() {
            return unique;
        }
        @Override public Object getDefault() {
            return defaultValue;
        }
        @Override public Field getField() {
            return field;
        }
        @Override public Method getSetMethod() {
            return setMethod;
        }
        @Override public Method getGetMethod() {
            return getMethod;
        }
    }

    private static final ActionLogger LOG = ActionLogger.getLogger({{className}}Entity.class);
    private static final String ENTITY_NAME = "{{entityName}}";

    {{#columnList}}
    private {{javaType}} {{fieldName}};
    {{/columnList}}

    @Override
    public String getEntityName() {
        return ENTITY_NAME;
    }
    @Override
    public SchemaType[] getTypes() {
        return {{className}}Types.values();
    }
    @Override
    public SchemaType getType(String name) {
        return {{className}}Types.valueOf(name);
    }

    {{#columnList}}
    public {{javaType}} get{{FieldName}}() {
        return {{fieldName}};
    }
    public void set{{FieldName}}({{javaType}} {{fieldName}}) {
        this.{{fieldName}} = {{fieldName}};
    }
    {{/columnList}}
}
